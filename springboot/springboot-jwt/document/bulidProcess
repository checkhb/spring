springboot-jwt项目构建流程

1、引入pom的依赖，其中移除内嵌的tomcat容器，尝试使用jetty。

 Jetty和Tomcat的比较

    相同点：
        Tomcat和Jetty都是一种Servlet引擎，他们都支持标准的servlet规范和JavaEE的规范。

    不同点：
      架构比较
        Jetty的架构比Tomcat的更为简单
        Jetty的架构是基于Handler来实现的，主要的扩展功能都可以用Handler来实现，扩展简单
        Tomcat的架构是基于容器设计的，进行扩展是需要了解Tomcat的整体设计结构，不易扩展

      性能比较
        Jetty和Tomcat性能方面差异不大
        Jetty可以同时处理大量连接而且可以长时间保持连接，适合于web聊天应用等等
        Jetty的架构简单，因此作为服务器，Jetty可以按需加载组件，减少不需要的组件，减少了服务器内存开销，从而提高服务器性能
        Jetty默认采用NIO结束在处理I/O请求上更占优势，在处理静态资源时，性能较高
        Tomcat适合处理少数非常繁忙的链接，也就是说链接生命周期短的话，Tomcat的总体性能更高
        Tomcat默认采用BIO处理I/O请求，在处理静态资源时，性能较差

      其它比较
        Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好
        Tomcat目前应用比较广泛，对JavaEE和Servlet的支持更加全面，很多特性会直接集成进来

      表现比较
         Jetty启动比Tomcat快：一般情况下，你都会得到这个结果

2、JWT---> JSON WEB TOKEN

   JWT是什么：
       JSON Web Token (JWT)是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，
       用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。


   使用场景：
       Authorization (授权) :
           这是使用JWT的最常见场景。
           一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。
           单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。

       Information Exchange (信息交换) :
           对于安全的在各方之间传输信息而言，JSON Web Tokens无疑是一种很好的方式。
           因为JWTs可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。
           另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改

   JWT的结构：
       JSON Web Token由三部分组成，它们之间用圆点(.)连接。
       这三部分分别是：
           Header
           Payload
           Signature
       因此，一个典型的JWT看起来是这个样子的：xxxxx.yyyyy.zzzzz

       Header：
          header典型的由两部分组成：token的类型（“JWT”）和算法名称（比如：HMAC SHA256或者RSA等等）。
          例如：
          {
              "alg":"HS256"
              "typ":"JWT"
          }
          然后，用Base64对这个JSON编码就得到JWT的第一部分

       Payload:
           JWT的第二部分是payload，它包含声明（要求）。声明是关于实体(通常是用户)和其他数据的声明。
           例如：
           {
               "iss": "John Wu JWT",
               "iat": 1441593502,
               "exp": 1441594722,
               "aud": "www.example.com",
               "sub": "jrocket@example.com",
               "from_user": "B",
               "target_user": "A"
           }
           对payload进行Base64编码就得到JWT的第二部分

       Signature：
           为了得到签名部分，你必须有编码过的header、编码过的payload、
           一个秘钥，签名算法是header中指定的那个，然对它们签名即可。
           例如：
           HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret);
           签名是用于验证消息在传递过程中有没有被更改，并且，对于使用私钥签名的token，
           它还可以验证JWT的发送方是否为它所称的发送方。

3、JWT和SESSION

   Session方式存储用户id的最大弊病在于要占用大量服务器内存，对于较大型应用而言可能还要保存许多的状态。
   一般而言，大型应用还需要借助一些KV数据库和一系列缓存机制来实现Session的存储。
   而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。
   并且Token不是Cookie（The token, not a cookie.），每次请求的时候Token都会被发送。


